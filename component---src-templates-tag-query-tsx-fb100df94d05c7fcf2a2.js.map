{"version":3,"sources":["webpack:///./src/components/item-tags.tsx","webpack:///./src/components/blog-list-item.tsx","webpack:///./src/components/listing.tsx","webpack:///./src/components/tag.tsx","webpack:///./src/templates/tag-query.tsx"],"names":["ItemTags","tags","useThemeConfig","tagsPath","basePath","Fragment","map","tag","i","key","slug","as","Link","to","replaceSlashes","name","BlogListItem","post","showTags","mb","sx","fontSize","color","title","mt","a","date","Listing","posts","className","Tag","pageContext","alignItems","justifyContent","flexFlow","variant","TagComponent","props","allPost","data","nodes","query"],"mappings":"2FAAA,yEAiCeA,IApBE,SAAC,GAAwB,IAAtBC,EAAsB,EAAtBA,KAAsB,EACTC,cAAvBC,EADgC,EAChCA,SAAUC,EADsB,EACtBA,SAElB,OACE,kBAAC,IAAMC,SAAP,KACGJ,EAAKK,KAAI,SAACC,EAAKC,GAAN,OACR,kBAAC,IAAMH,SAAP,CAAgBI,IAAKF,EAAIG,QACpBF,GAAF,KACD,kBAAC,IAAD,CACEG,GAAIC,OACJC,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,EAAjB,IAA6BI,EAAIG,OAElDH,EAAIQ,a,2GCeFC,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,IAASC,gBAAT,gBACnB,YAAC,IAAD,CAAKC,GAAI,GACP,YAAC,IAAD,CAAOR,GAAIC,OAAMC,GAAII,EAAKP,KAAMU,GAAI,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,MAAO,SAC/DL,EAAKM,OAER,iBAAGH,GAAI,CAAEE,MAAO,YAAaE,GAAI,EAAGC,EAAG,CAAEH,MAAO,aAAeD,SAAU,CAAC,EAAG,EAAG,KAC9E,wBAAOJ,EAAKS,MACXT,EAAKhB,MAAQiB,GACZ,YAAC,IAAMb,SAAP,WAEE,YAAC,IAAD,CAAUJ,KAAMgB,EAAKhB,WCJhB0B,IARC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,IAAUC,iBAAV,eAA0BX,gBAA1B,gBACd,uBAASE,GAAI,CAAED,GAAI,CAAC,EAAG,EAAG,IAAMU,UAAWA,GACxCD,EAAMtB,KAAI,SAACW,GAAD,OACT,YAAC,EAAD,CAAcR,IAAKQ,EAAKP,KAAMO,KAAMA,EAAMC,SAAUA,U,mLCOpDY,EAAM,SAAC,GAAqC,IAAnCF,EAAmC,EAAnCA,MAAOG,EAA4B,EAA5BA,YAA4B,EACjB7B,cAAvBC,EADwC,EACxCA,SAAUC,EAD8B,EAC9BA,SAElB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKmB,MAAK,QAAUQ,EAAYhB,OAChC,YAAC,IAAD,CACEK,GAAI,CACFY,WAAY,SACZC,eAAgB,gBAChBC,SAAU,SAGZ,YAAC,IAAD,CAASC,QAAQ,aAAaJ,EAAYhB,MAC1C,YAAC,IAAD,CACEJ,GAAIC,OACJQ,GAAI,CAAEe,QAAS,mBACftB,GAAIC,YAAe,IAAIV,EAAL,IAAiBD,IAHrC,kBAQF,YAAC,IAAD,CAASyB,MAAOA,EAAOR,GAAI,CAAEI,GAAI,CAAC,EAAG,QClD5BY,UDqEA,YAAgD,IAAvBC,EAAuB,oBAEnDC,EACND,EADFE,KAAQD,QAGV,OAAO,YAAC,EAAD,eAAKV,MAAOU,EAAQE,OAAWH,KC1EzBD,IAEFK,EAAQ","file":"component---src-templates-tag-query-tsx-fb100df94d05c7fcf2a2.js","sourcesContent":["import React from \"react\"\nimport { Link as TLink } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\n\ntype TagsProps = {\n  tags: {\n    name: string\n    slug: string\n  }[]\n}\n\nconst ItemTags = ({ tags }: TagsProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <React.Fragment>\n      {tags.map((tag, i) => (\n        <React.Fragment key={tag.slug}>\n          {!!i && `, `}\n          <TLink\n            as={Link}\n            to={replaceSlashes(`/${basePath}/${tagsPath}/${tag.slug}`)}\n          >\n            {tag.name}\n          </TLink>\n        </React.Fragment>\n      ))}\n    </React.Fragment>\n  )\n}\n\nexport default ItemTags\n","/** @jsx jsx */\nimport React from \"react\"\nimport { jsx, Link as TLink } from \"theme-ui\"\nimport { Box } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport ItemTags from \"./item-tags\"\n\ntype BlogListItemProps = {\n  post: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }\n  showTags?: boolean\n}\n\nconst BlogListItem = ({ post, showTags = true }: BlogListItemProps) => (\n  <Box mb={4}>\n    <TLink as={Link} to={post.slug} sx={{ fontSize: [1, 2, 3], color: `text` }}>\n      {post.title}\n    </TLink>\n    <p sx={{ color: `secondary`, mt: 1, a: { color: `secondary` }, fontSize: [1, 1, 2] }}>\n      <time>{post.date}</time>\n      {post.tags && showTags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n  </Box>\n)\n\nexport default BlogListItem\n","/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport BlogListItem from \"./blog-list-item\"\n\ntype ListingProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags?: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  className?: string\n  showTags?: boolean\n}\n\nconst Listing = ({ posts, className = ``, showTags = true }: ListingProps) => (\n  <section sx={{ mb: [5, 6, 7] }} className={className}>\n    {posts.map((post) => (\n      <BlogListItem key={post.slug} post={post} showTags={showTags} />\n    ))}\n  </section>\n)\n\nexport default Listing\n","/** @jsx jsx */\nimport { jsx, Heading, Link as TLink } from \"theme-ui\"\nimport { Flex } from \"@theme-ui/components\"\nimport { Link } from \"gatsby\"\nimport Layout from \"./layout\"\nimport useThemeConfig from \"../hooks/use-theme-config\"\nimport Listing from \"./listing\"\nimport replaceSlashes from \"../utils/replaceSlashes\"\nimport SEO from \"./seo\"\n\ntype TagProps = {\n  posts: {\n    slug: string\n    title: string\n    date: string\n    excerpt: string\n    description: string\n    timeToRead?: number\n    tags: {\n      name: string\n      slug: string\n    }[]\n  }[]\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n}\n\nconst Tag = ({ posts, pageContext }: TagProps) => {\n  const { tagsPath, basePath } = useThemeConfig()\n\n  return (\n    <Layout>\n      <SEO title={`Tag: ${pageContext.name}`} />\n      <Flex\n        sx={{\n          alignItems: `center`,\n          justifyContent: `space-between`,\n          flexFlow: `wrap`,\n        }}\n      >\n        <Heading variant=\"styles.h2\">{pageContext.name}</Heading>\n        <TLink\n          as={Link}\n          sx={{ variant: `links.secondary` }}\n          to={replaceSlashes(`/${basePath}/${tagsPath}`)}\n        >\n          View all tags\n        </TLink>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  )\n}\n\ntype WrapperProps = {\n  data: {\n    allPost: any\n    [key: string]: any\n  }\n  pageContext: {\n    isCreatedByStatefulCreatePages: boolean\n    slug: string\n    name: string\n    [key: string]: any\n  }\n  [key: string]: any\n}\n\nexport default function TagWrapper({ ...props }: WrapperProps) {\n  const {\n    data: { allPost },\n  } = props\n\n  return <Tag posts={allPost.nodes} {...props} />\n}\n","import { graphql } from \"gatsby\"\nimport TagComponent from \"../components/tag\"\n\nexport default TagComponent\n\nexport const query = graphql`\n  query($slug: String!, $formatString: String!) {\n    allPost(sort: { fields: date, order: DESC }, filter: { tags: { elemMatch: { slug: { eq: $slug } } } }) {\n      nodes {\n        slug\n        title\n        date(formatString: $formatString)\n        excerpt\n        timeToRead\n        description\n        tags {\n          name\n          slug\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}